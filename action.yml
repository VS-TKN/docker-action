name: Docker Action
description: A GitHub action to build and push a docker image from a default or custom Dockerfile

inputs:
  dockerfiles-repository:
    description: "Repository containing the Dockerfile to use"
    required: false
  dockerfile-path:
    description: "Dockerfile path inside the dockerfiles-repository. Only used if dockerfiles-repository is set"
    required: false
  dockerfile-template-path:
    description: "Dockerfile template path to use. Only used when dockerfiles-repository is not set. The templates come from the dockerfiles directory in the action repository"
    required: false
  image:
    description: "The image name"
    required: false
    default: ${{ github.repository }}
  push:
    description: "Whether to push the image or not. The latest tag will be pushed only from the main branch"
    required: false
    default: "false"
  local:
    description: "Disable docker login and build docker image locally"
    required: false
    default: "false"
  registry:
    description: "Docker registry"
    required: false
    default: "ghcr.io"
  registry-user:
    description: "Docker registry user"
    required: false
    default: ${{ github.actor }}
  registry-password:
    description: "Docker registry password"
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: "Login to Docker registry"
      if: ${{ inputs.local != 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-password }}

    - name: "Clone Dockerfile repository"
      if: ${{ (inputs.dockerfiles-repository != '' && inputs.dockerfile-path != '') || inputs.dockerfile-template-path != '' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.dockerfiles-repository || 'phorus-group/docker-action' }}
        path: .dockerfiles-repository

    - name: "Set the Dockerfile"
      if: ${{ (inputs.dockerfiles-repository != '' && inputs.dockerfile-path != '') || inputs.dockerfile-template-path != '' }}
      shell: bash
      run: |
        rm -f Dockerfile
        ls -a
        ls -a .dockerfiles-repository
        mv .dockerfiles-repository/${{ inputs.dockerfile-path || inputs.dockerfile-template-path }} Dockerfile
        rm -rf .dockerfiles-repository

    - name: "Set up QEMU"
      uses: docker/setup-qemu-action@v3

    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "Extract metadata"
      id: meta
      uses: docker/metadata-action@v5
      env:
        DOCKER_METADATA_PR_HEAD_SHA: true
      with:
        images: ${{ inputs.image }}
        tags: |
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest,enable=${{ github.ref_name == github.event.repository.default_branch }}

    - name: "Build Docker image"
      uses: docker/build-push-action@v6
      with:
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: type=registry,ref=${{ inputs.image }}:buildcache
        cache-to: type=registry,ref=${{ inputs.image }}:buildcache,mode=max

    - name: "Run vulnerability analysis"
      uses: phorus-group/vulnerability-analysis-action@main
      with:
        scan-type: image
        scan-ref: ${{ inputs.image }}:${{ steps.meta.outputs.version }}

    - name: "Push Docker image"
      if: ${{ inputs.push == 'true' }}
      uses: docker/build-push-action@v6
      with:
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: type=registry,ref=${{ inputs.image }}:buildcache
        cache-to: type=registry,ref=${{ inputs.image }}:buildcache,mode=max
        provenance: mode=max
        sbom: true
        push: true
